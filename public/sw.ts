/// <reference lib="webworker" />

import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute, NavigationRoute } from "workbox-routing";
import { CacheFirst, StaleWhileRevalidate } from "workbox-strategies";
import { CacheableResponsePlugin } from "workbox-cacheable-response";
import { ExpirationPlugin } from "workbox-expiration";

declare let self: ServiceWorkerGlobalScope;

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy
registerRoute(
	({ url }) => url.origin === "https://fonts.googleapis.com",
	new StaleWhileRevalidate({
		cacheName: "google-fonts-stylesheets",
	})
);

// Cache the underlying font files with a cache-first strategy for 1 year
registerRoute(
	({ url }) => url.origin === "https://fonts.gstatic.com",
	new CacheFirst({
		cacheName: "google-fonts-webfonts",
		plugins: [
			new CacheableResponsePlugin({
				statuses: [0, 200],
			}),
			new ExpirationPlugin({
				maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
				maxEntries: 30,
			}),
		],
	})
);

// Cache images
registerRoute(
	({ request }) => request.destination === "image",
	new CacheFirst({
		cacheName: "images",
		plugins: [
			new CacheableResponsePlugin({
				statuses: [0, 200],
			}),
			new ExpirationPlugin({
				maxEntries: 60,
				maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
			}),
		],
	})
);

// Cache API responses
registerRoute(
	({ request }) =>
		request.destination === "script" || request.destination === "style",
	new StaleWhileRevalidate({
		cacheName: "static-resources",
	})
);

// Handle navigation requests with a network-first strategy
const handler = createHandlerBoundToURL("/index.html");
const navigationRoute = new NavigationRoute(handler);
registerRoute(navigationRoute);

// Listen for updates
self.addEventListener("message", (event) => {
	if (event.data && event.data.type === "SKIP_WAITING") {
		self.skipWaiting();
	}
});

// Background sync for offline data
const bgSyncPlugin = {
	async fetchDidFail({ request }) {
		await self.registration.sync.register("sync-inventory");
	},
};

// Handle offline inventory updates
self.addEventListener("sync", (event) => {
	if (event.tag === "sync-inventory") {
		event.waitUntil(syncInventory());
	}
});

async function syncInventory() {
	const cache = await caches.open("inventory-updates");
	const requests = await cache.keys();

	return Promise.all(
		requests.map(async (request) => {
			try {
				const response = await fetch(request);
				if (response.ok) {
					await cache.delete(request);
				}
				return response;
			} catch (error) {
				console.error("Sync failed:", error);
			}
		})
	);
}
